{
  "version": 3,
  "file": "betoken.js",
  "sourceRoot": "",
  "sources": [
    "betoken.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "#Import web3\r\nWeb3 = require 'web3'\r\nweb3 = window.web3\r\nif typeof web3 != \"undefined\"\r\n  web3 = new Web3(web3.currentProvider)\r\nelse\r\n  web3 = new Web3(new Web3.providers.HttpProvider(\"https://rinkeby.infura.io/m7Pdc77PjIwgmp7t0iKI\"))\r\n\r\n###*\r\n * Sets the first account as defaultAccount\r\n * @return {Promise} .then(()->)\r\n###\r\ngetDefaultAccount = () ->\r\n  return web3.eth.getAccounts().then(\r\n    (accounts) ->\r\n      web3.eth.defaultAccount = accounts[0]\r\n  )\r\n\r\n###*\r\n * Constructs an abstraction of Betoken contracts\r\n * @param {String} _address the GroupFund contract's address\r\n###\r\nexport Betoken = (_address) ->\r\n  self = this\r\n  self.contracts =\r\n    betokenFund: null\r\n    controlToken: null\r\n  self.addrs =\r\n    betokenFund: null\r\n    controlToken: null\r\n\r\n  ###\r\n    Getters\r\n  ###\r\n\r\n  ###*\r\n   * Gets a primitive variable in GroupFund\r\n   * @param  {String} _varName the name of the primitive variable\r\n   * @return {Promise}          .then((_value)->)\r\n  ###\r\n  self.getPrimitiveVar = (_varName) ->\r\n    return self.contracts.betokenFund.methods[_varName]().call()\r\n\r\n  ###*\r\n   * Calls a mapping or an array in GroupFund\r\n   * @param  {String} _name name of the mapping/array\r\n   * @param  {Any} _input       the input\r\n   * @return {Promise}              .then((_value)->)\r\n  ###\r\n  self.getMappingOrArrayItem = (_name, _input) ->\r\n    return self.contracts.betokenFund.methods[_name](_input).call()\r\n\r\n  ###*\r\n   * Calls a double mapping in GroupFund\r\n   * @param  {String} _mappingName name of the mapping\r\n   * @param  {Any} _input1      the first input\r\n   * @param  {Any} _input2      the second input\r\n   * @return {Promise}              .then((_value)->)\r\n  ###\r\n  self.getDoubleMapping = (_mappingName, _input1, _input2) ->\r\n    return self.contracts.betokenFund.methods[_mappingName](_input1, _input2).call()\r\n\r\n  ###*\r\n   * Gets the Kairo balance of an address\r\n   * @param  {String} _address the address whose balance we're getting\r\n   * @return {Promise}          .then((_value)->)\r\n  ###\r\n  self.getKairoBalance = (_address) ->\r\n    return self.contracts.controlToken.methods.balanceOf(_address).call()\r\n\r\n  self.getKairoTotalSupply = () ->\r\n    return self.contracts.controlToken.methods.totalSupply().call()\r\n\r\n  ###*\r\n   * Gets an entire array\r\n   * @param  {String} _name name of the array\r\n   * @return {Promise}       .then((_array)->)\r\n  ###\r\n  self.getArray = (_name) ->\r\n    array = []\r\n    return self.contracts.betokenFund.methods[\"#{_name}Count\"]().call().then(\r\n      (_count) ->\r\n        count = +_count\r\n        if count == 0\r\n          return []\r\n        array = new Array(count)\r\n        getItem = (id) ->\r\n          return self.contracts.betokenFund.methods[_name](id).call().then(\r\n            (_item) ->\r\n              return new Promise((fullfill, reject) ->\r\n                if typeof _item != null\r\n                  array[id] = _item\r\n                  fullfill()\r\n                else\r\n                  reject()\r\n                return\r\n              )\r\n          )\r\n        getAllItems = (getItem(id) for id in [0..count - 1])\r\n        return Promise.all(getAllItems)\r\n    ).then(\r\n      () ->\r\n        return array\r\n    )\r\n\r\n  ###\r\n    Phase handlers\r\n  ###\r\n\r\n  ###*\r\n   * Ends the current phase\r\n   * @param  {Function} _callback will be called after tx hash is generated\r\n   * @return {Promise} .then(()->)\r\n  ###\r\n  self.endPhase = (_callback) ->\r\n    funcName = null\r\n    return self.getPrimitiveVar(\"cyclePhase\").then(\r\n      (_cyclePhase) ->\r\n        _cyclePhase = +_cyclePhase\r\n        switch _cyclePhase\r\n          when 0\r\n            funcName = \"endChangeMakingTime\"\r\n          when 1\r\n            funcName = \"endProposalMakingTime\"\r\n          when 2\r\n            funcName = \"endWaitingTime\"\r\n          when 3\r\n            funcName = \"finalizeCycle\"\r\n          when 4\r\n            funcName = \"startNewCycle\"\r\n    ).then(\r\n      () ->\r\n        return getDefaultAccount()\r\n    ).then(\r\n      () ->\r\n        return self.contracts.betokenFund.methods[funcName]().send({from: web3.eth.defaultAccount}).on(\r\n          \"transactionHash\", _callback\r\n        )\r\n    )\r\n\r\n  ###\r\n    ChangeMakingTime functions\r\n  ###\r\n\r\n  ###*\r\n   * Allows user to deposit into the GroupFund\r\n   * @param  {BigNumber} _amountInWeis the deposit amount\r\n   * @param  {Function} _callback will be called after tx hash is generated\r\n   * @return {Promise}               .then(()->)\r\n  ###\r\n  self.deposit = (_amountInWeis, _callback) ->\r\n    funcSignature = web3.eth.abi.encodeFunctionSignature(\"deposit()\")\r\n    return getDefaultAccount().then(\r\n      () ->\r\n        return web3.eth.sendTransaction({from: web3.eth.defaultAccount, to: self.addrs.betokenFund, value: _amountInWeis, data: funcSignature}).on(\"transactionHash\", _callback)\r\n    )\r\n\r\n  ###*\r\n   * Allows user to withdraw from GroupFund balance\r\n   * @param  {BigNumber} _amountInWeis the withdrawl amount\r\n   * @param  {Function} _callback will be called after tx hash is generated\r\n   * @return {Promise}               .then(()->)\r\n  ###\r\n  self.withdraw = (_amountInWeis, _callback) ->\r\n    return getDefaultAccount().then(\r\n      () ->\r\n        return self.contracts.betokenFund.methods.withdraw(_amountInWeis).send({from: web3.eth.defaultAccount}).on(\"transactionHash\", _callback)\r\n    )\r\n\r\n  ###*\r\n   * Withdraws all of user's balance in cases of emergency\r\n   * @param  {Function} _callback will be called after tx hash is generated\r\n   * @return {Promise}           .then(()->)\r\n  ###\r\n  self.emergencyWithdraw = (_callback) ->\r\n    return getDefaultAccount().then(\r\n      () ->\r\n        return self.contracts.betokenFund.methods.emergencyWithdraw().send({from: web3.eth.defaultAccount}).on(\"transactionhash\", _callback)\r\n    )\r\n\r\n  ###*\r\n   * Sends Kairo to another address\r\n   * @param  {String} _to           the recipient address\r\n   * @param  {BigNumber} _amountInWeis the withdrawl amount\r\n   * @param  {Function} _callback     will be called after tx hash is generated\r\n   * @return {Promise}               .then(()->)\r\n  ###\r\n  self.sendKairo = (_to, _amountInWeis, _callback) ->\r\n    return getDefaultAccount().then(\r\n      () ->\r\n        return self.contracts.controlToken.methods.transfer(_to, _amountInWeis).send({from: web3.eth.defaultAccount}).on(\"transactionHash\", _callback)\r\n    )\r\n\r\n  ###\r\n    ProposalMakingTime functions\r\n  ###\r\n\r\n  ###*\r\n   * Creates proposal\r\n   * @param  {String} _tokenAddress the token address\r\n   * @param  {String} _tokenSymbol  the token symbol (ticker)\r\n   * @param  {Number} _tokenDecimals the number of decimals the token uses\r\n   * @param  {BigNumber} _stakeInWeis the investment amount\r\n   * @param  {Function} _callback will be called after tx hash is generated\r\n   * @return {Promise}               .then(()->)\r\n  ###\r\n  self.createProposal = (_tokenAddress, _tokenSymbol, _tokenDecimals, _stakeInWeis, _callback) ->\r\n    return getDefaultAccount().then(\r\n      () ->\r\n        return self.contracts.betokenFund.methods.createProposal(_tokenAddress, _tokenSymbol, _tokenDecimals, _stakeInWeis).send({from: web3.eth.defaultAccount}).on(\"transactionHash\", _callback)\r\n    )\r\n\r\n  ###*\r\n   * Stakes for or against a proposal\r\n   * @param  {Integer} _proposalId   the proposal ID\r\n   * @param  {BigNumber} _stakeInWeis the investment amount\r\n   * @param  {Boolean} _support the stance of user\r\n   * @param  {Function} _callback will be called after tx hash is generated\r\n   * @return {Promise}               .then(()->)\r\n  ###\r\n  self.stakeProposal = (_proposalId, _stakeInWeis, _support, _callback) ->\r\n    return getDefaultAccount().then(\r\n      () ->\r\n        return self.contracts.betokenFund.methods.stakeProposal(_proposalId, _stakeInWeis, _support).send({from: web3.eth.defaultAccount}).on(\"transactionHash\", _callback)\r\n    )\r\n\r\n  ###*\r\n   * Cancels user's stake in a proposal\r\n   * @param  {Integer} _proposalId the proposal ID\r\n   * @param  {Function} _callback will be called after tx hash is generated\r\n   * @return {Promise}             .then(()->)\r\n  ###\r\n  self.cancelStake = (_proposalId, _callback) ->\r\n    return getDefaultAccount().then(\r\n      () ->\r\n        return self.contracts.betokenFund.methods.cancelProposalStake(_proposalId).send({from: web3.eth.defaultAccount}).on(\"transactionHash\", _callback)\r\n    )\r\n\r\n  ###\r\n    Object Initialization\r\n  ###\r\n\r\n  self.init = () ->\r\n    #Initialize GroupFund contract\r\n    self.addrs.betokenFund = _address\r\n    betokenFundABI = require(\"./abi/BetokenFund.json\").abi\r\n    self.contracts.betokenFund = new web3.eth.Contract(betokenFundABI, self.addrs.betokenFund)\r\n\r\n    #Get ControlToken address\r\n    return self.contracts.betokenFund.methods.controlTokenAddr().call().then(\r\n      (_controlTokenAddr) ->\r\n        #Initialize ControlToken contract\r\n        self.addrs.controlToken = _controlTokenAddr\r\n        controlTokenABI = require(\"./abi/ControlToken.json\").abi\r\n        self.contracts.controlToken = new web3.eth.Contract(controlTokenABI, self.addrs.controlToken)\r\n    )\r\n\r\n  return self\r\n"
  ]
}